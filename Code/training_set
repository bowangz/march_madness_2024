```ruby
import numpy as np 
import pandas as pd 
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score


def kenpom_team(spelling_df,kenpom_df):
    kenpom_df['TEAM'] = kenpom_df['TEAM'].str.lower()
    spelling_df['TeamNameSpelling'] = spelling_df['TeamNameSpelling'].str.lower()
    merge_df = pd.merge(kenpom_df,spelling_df,left_on='TEAM',right_on='TeamNameSpelling',how='left')
    merge_df.drop(columns=['CONF', 'CONF ID', 'QUAD NO', 'QUAD ID', 'ROUND', 'TEAM NO', 'TEAM ID', 'TeamNameSpelling'], inplace=True)
    
    return merge_df


def get_game_stats(season, team_a, team_b, kenpom):

    stats_a_df = kenpom[(kenpom['YEAR'] == season) & (kenpom['TeamID'] == team_a)]
    stats_b_df = kenpom[(kenpom['YEAR'] == season) & (kenpom['TeamID'] == team_b)]
    combined_df = pd.merge(stats_a_df, stats_b_df, on='YEAR', suffixes=('_a', '_b'))
    
    return combined_df


def build_dataset(start_data_season, kenpom_id_df, tourn_df, end_season = 2023):
    data = []

    for season in range(start_data_season + 1, end_season + 1):
        tourney_games = tourn_df[tourn_df['Season'] == season].reset_index(drop=True)
        for idx, g in tourney_games.iterrows():

            clear_output(wait=True)
            print(f"{season}: {idx}/{len(tourney_games)}")

            team_a = min([g['WTeamID'], g['LTeamID']])
            team_b = max([g['WTeamID'], g['LTeamID']])

            if team_a == g['WTeamID']:
                winner = 'A'
                team_a_score = g['WScore']
                team_b_score = g['LScore']
            else:
                winner = 'B'
                team_a_score = g['LScore']
                team_b_score = g['WScore']

            print(f"{team_a} x {team_b}")

            game_stats = get_game_stats(season, team_a, team_b, kenpom_id_df)
            game_stats['Winner'] = winner
            game_stats['Day'] = g['DayNum']
            
            data.append(game_stats)

    data_df = pd.concat(data, ignore_index=True)
    display(data_df)
    
    return data_df
```
        
